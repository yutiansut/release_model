#pragma once
#include <map>
#include <string>
namespace hft {
static std::map<std::string, double> tick_size_data{
    {"pb3", 5.000000},  {"ag1", 1.000000},  {"pb4", 5.000000},  {"ag2", 1.000000},  {"pb5", 5.000000},
    {"ag3", 1.000000},  {"pb6", 5.000000},  {"ag4", 1.000000},  {"rb2", 1.000000},  {"ag5", 1.000000},
    {"rb1", 1.000000},  {"ag6", 1.000000},  {"rb3", 1.000000},  {"al1", 5.000000},  {"rb4", 1.000000},
    {"al2", 5.000000},  {"sc3", 0.100000},  {"al3", 5.000000},  {"sc4", 0.100000},  {"al4", 5.000000},
    {"sc6", 0.100000},  {"al5", 5.000000},  {"sn1", 10.000000}, {"al6", 5.000000},  {"sn2", 10.000000},
    {"au1", 0.020000},  {"sn3", 10.000000}, {"au2", 0.020000},  {"sn4", 10.000000}, {"au3", 0.020000},
    {"sn5", 10.000000}, {"au4", 0.020000},  {"sn6", 10.000000}, {"au5", 0.020000},  {"sp1", 2.000000},
    {"au6", 0.020000},  {"sp2", 2.000000},  {"bu1", 2.000000},  {"sp3", 2.000000},  {"bu2", 2.000000},
    {"sp4", 2.000000},  {"bu3", 2.000000},  {"sp5", 2.000000},  {"bu4", 2.000000},  {"sp6", 2.000000},
    {"bu5", 2.000000},  {"ss1", 5.000000},  {"bu6", 2.000000},  {"ss2", 5.000000},  {"cu1", 10.000000},
    {"ss3", 5.000000},  {"cu2", 10.000000}, {"ss4", 5.000000},  {"cu3", 10.000000}, {"ss5", 5.000000},
    {"cu4", 10.000000}, {"ss6", 5.000000},  {"cu5", 10.000000}, {"wr1", 1.000000},  {"cu6", 10.000000},
    {"wr2", 1.000000},  {"fu1", 1.000000},  {"wr3", 1.000000},  {"fu2", 1.000000},  {"zn1", 5.000000},
    {"fu3", 1.000000},  {"zn2", 5.000000},  {"fu4", 1.000000},  {"zn3", 5.000000},  {"fu5", 1.000000},
    {"zn4", 5.000000},  {"fu6", 1.000000},  {"zn5", 5.000000},  {"hc1", 1.000000},  {"zn6", 5.000000},
    {"hc2", 1.000000},  {"hc3", 1.000000},  {"hc4", 1.000000},  {"hc5", 1.000000},  {"hc6", 1.000000},
    {"lu1", 1.000000},  {"lu2", 1.000000},  {"lu3", 1.000000},  {"lu4", 1.000000},  {"lu5", 1.000000},
    {"ni1", 10.000000}, {"ni2", 10.000000}, {"ni3", 10.000000}, {"ni4", 10.000000}, {"ni5", 10.000000},
    {"ni6", 10.000000}, {"nr1", 5.000000},  {"nr2", 5.000000},  {"nr3", 5.000000},  {"nr4", 5.000000},
    {"nr5", 5.000000},  {"nr6", 5.000000},  {"pb1", 5.000000},  {"pb2", 5.000000},  {"rb5", 1.000000},
    {"rb6", 1.000000},  {"ru1", 5.000000},  {"ru2", 5.000000},  {"ru3", 5.000000},  {"ru4", 5.000000},
    {"ru5", 5.000000},  {"ru6", 5.000000},  {"sc1", 0.100000},  {"sc2", 0.100000},  {"IC1", 0.200000},
    {"IC2", 0.200000},  {"IC3", 0.200000},  {"IC4", 0.200000},  {"IF1", 0.200000},  {"IF2", 0.200000},
    {"IF3", 0.200000},  {"IF4", 0.200000},  {"IH1", 0.200000},  {"IH2", 0.200000},  {"IH3", 0.200000},
    {"IH4", 0.200000},  {"T1", 0.005000},   {"T2", 0.005000},   {"T3", 0.005000},   {"TF1", 0.005000},
    {"TF2", 0.005000},  {"TF3", 0.005000},  {"TS1", 0.005000},  {"TS2", 0.005000},  {"TS3", 0.005000}};

static std::map<std::string, double> multi_data{
    {"pb3", 5.000000},     {"ag1", 15.000000},    {"pb4", 5.000000},     {"ag2", 15.000000},
    {"pb5", 5.000000},     {"ag3", 15.000000},    {"pb6", 5.000000},     {"ag4", 15.000000},
    {"rb2", 10.000000},    {"ag5", 15.000000},    {"rb1", 10.000000},    {"ag6", 15.000000},
    {"rb3", 10.000000},    {"al1", 5.000000},     {"rb4", 10.000000},    {"al2", 5.000000},
    {"sc3", 1000.000000},  {"al3", 5.000000},     {"sc4", 1000.000000},  {"al4", 5.000000},
    {"sc6", 1000.000000},  {"al5", 5.000000},     {"sn1", 1.000000},     {"al6", 5.000000},
    {"sn2", 1.000000},     {"au1", 1000.000000},  {"sn3", 1.000000},     {"au2", 1000.000000},
    {"sn4", 1.000000},     {"au3", 1000.000000},  {"sn5", 1.000000},     {"au4", 1000.000000},
    {"sn6", 1.000000},     {"au5", 1000.000000},  {"sp1", 10.000000},    {"au6", 1000.000000},
    {"sp2", 10.000000},    {"bu1", 10.000000},    {"sp3", 10.000000},    {"bu2", 10.000000},
    {"sp4", 10.000000},    {"bu3", 10.000000},    {"sp5", 10.000000},    {"bu4", 10.000000},
    {"sp6", 10.000000},    {"bu5", 10.000000},    {"ss1", 5.000000},     {"bu6", 10.000000},
    {"ss2", 5.000000},     {"cu1", 5.000000},     {"ss3", 5.000000},     {"cu2", 5.000000},
    {"ss4", 5.000000},     {"cu3", 5.000000},     {"ss5", 5.000000},     {"cu4", 5.000000},
    {"ss6", 5.000000},     {"cu5", 5.000000},     {"wr1", 10.000000},    {"cu6", 5.000000},
    {"wr2", 10.000000},    {"fu1", 10.000000},    {"wr3", 10.000000},    {"fu2", 10.000000},
    {"zn1", 5.000000},     {"fu3", 10.000000},    {"zn2", 5.000000},     {"fu4", 10.000000},
    {"zn3", 5.000000},     {"fu5", 10.000000},    {"zn4", 5.000000},     {"fu6", 10.000000},
    {"zn5", 5.000000},     {"hc1", 10.000000},    {"zn6", 5.000000},     {"hc2", 10.000000},
    {"hc3", 10.000000},    {"hc4", 10.000000},    {"hc5", 10.000000},    {"hc6", 10.000000},
    {"lu1", 10.000000},    {"lu2", 10.000000},    {"lu3", 10.000000},    {"lu4", 10.000000},
    {"lu5", 10.000000},    {"ni1", 1.000000},     {"ni2", 1.000000},     {"ni3", 1.000000},
    {"ni4", 1.000000},     {"ni5", 1.000000},     {"ni6", 1.000000},     {"nr1", 10.000000},
    {"nr2", 10.000000},    {"nr3", 10.000000},    {"nr4", 10.000000},    {"nr5", 10.000000},
    {"nr6", 10.000000},    {"pb1", 5.000000},     {"pb2", 5.000000},     {"rb5", 10.000000},
    {"rb6", 10.000000},    {"ru1", 10.000000},    {"ru2", 10.000000},    {"ru3", 10.000000},
    {"ru4", 10.000000},    {"ru5", 10.000000},    {"ru6", 10.000000},    {"sc1", 1000.000000},
    {"sc2", 1000.000000},  {"IC1", 200.000000},   {"IC2", 200.000000},   {"IC3", 200.000000},
    {"IC4", 200.000000},   {"IF1", 300.000000},   {"IF2", 300.000000},   {"IF3", 300.000000},
    {"IF4", 300.000000},   {"IH1", 300.000000},   {"IH2", 300.000000},   {"IH3", 300.000000},
    {"IH4", 300.000000},   {"T1", 10000.000000},  {"T2", 10000.000000},  {"T3", 10000.000000},
    {"TF1", 10000.000000}, {"TF2", 10000.000000}, {"TF3", 10000.000000}, {"TS1", 10000.000000},
    {"TS2", 10000.000000}, {"TS3", 10000.000000}};  // namespace hft
class TProduct {
   public:
    explicit TProduct(std::string c_name) : name{c_name}, multiplier{1.0}, tick_size{1.0} {
        auto itr = multi_data.find(c_name);
        if (itr != multi_data.end()) {
            multiplier = itr->second;
        }
        auto itr2 = tick_size_data.find(c_name);
        if (itr2 != tick_size_data.end()) {
            tick_size = itr2->second;
        }
    }
    std::string name;
    // std::string ticker_name;
    double multiplier;
    double tick_size;
};
};  // namespace hft
